#!/usr/bin/env python3
"""
Test class for: {{ question.name }}
Generated by TIF Autograder CLI Tool.
Language: {{ config.language }}
"""

import unittest
import subprocess
import sys
import os
import tempfile
{% set needs_imports = question.marking_items | selectattr('type', 'in', ['function_test']) | list | length > 0 %}
{% if needs_imports %}
import importlib.util
import inspect
{% endif %}
from pathlib import Path
from gradescope_utils.autograder_utils.decorators import weight, visibility, number

class TestQuestion{{ question_number }}(unittest.TestCase):
    """Test class for Question {{ question_number }}: {{ question.name }}."""

    def setUp(self):
        """Set up test environment."""
        self.source_dir = Path('/autograder/source')
        self.submission_files = []
        
        # Get list of submitted files
        for file_path in self.source_dir.iterdir():
            if file_path.is_file():
                self.submission_files.append(file_path.name)
        
        # Add source directory to Python path for imports
        if str(self.source_dir) not in sys.path:
            sys.path.insert(0, str(self.source_dir))
    
{% if needs_imports %}
    def import_function_from_file(self, file_name, function_name):
        """Import a specific function from a student file."""
        try:
            file_path = self.source_dir / file_name
            
            # Check if file exists
            if not file_path.exists():
                raise ImportError(f"File {file_name} not found")
            
            # Load the module
            spec = importlib.util.spec_from_file_location("student_module", file_path)
            module = importlib.util.module_from_spec(spec)
            if spec.loader is None:
                raise ImportError(f"Could not load module from {file_path}")
            spec.loader.exec_module(module)
            
            # Get the function
            if not hasattr(module, function_name):
                raise ImportError(f"Function {function_name} not found in {file_name}")
            
            return getattr(module, function_name)
            
        except Exception as e:
            raise ImportError(f"Failed to import {function_name} from {file_name}: {str(e)}")

{% endif %}

{% for item in question.marking_items %}

{% set test_name = ('item_' + loop.index|string)|lower %}

{% if item.type == "file_exists" %}
    {% include 'subtemplates/file_exists_method.j2' %}
{% elif item.type == "output_comparison" %}
    {% include 'subtemplates/output_comparison_method.j2' %}
{% elif item.type == "signature_check" %}
    {% include 'subtemplates/signature_check_method.j2' %}
{% elif item.type == "function_test" %}
    {% include 'subtemplates/function_test_method.j2' %}
{% endif %}

{% endfor %}

if __name__ == '__main__':
    unittest.main()
