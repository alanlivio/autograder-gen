    @weight({{ item.total_mark }})
    @number({{ question_number }}.{{ loop.index }})
    @visibility('{{ item.visibility }}')
    def test_{{ test_name }}(self):
        """{{ item.name if item.name else (question.name + " - Item " + loop.index|string) }}"""
        # Function import and testing
        target_file = "{{ item.target_file }}"
        function_name = "{{ item.function_name }}"
        print(f"Starting test for function '{function_name}' in '{target_file}'")
        try:
            function = self.import_function_from_file(target_file, function_name)
        except ImportError as e:
            self.fail(f"RUNTIME ERROR: Failed to import function '{function_name}' from '{target_file}'. Check for syntax errors or missing function definition. Error: {str(e)}")
        except Exception as e:
            self.fail(f"RUNTIME ERROR: Error accessing function '{function_name}' in '{target_file}'. Error: {str(e)}")
        
        # FAILED: Function not callable
        self.assertTrue(callable(function), 
            f"FAILED: Function '{function_name}' is not callable")
        
        {% if item.test_cases %}
        # Run test cases
        {% for test_case in item.test_cases %}
        # Test case {{ loop.index }}
        {% if test_case.args %}
        args = {{ test_case.args }}
        {% else %}
        args = []
        {% endif %}
        {% if test_case.kwargs %}
        kwargs = {{ test_case.kwargs }}
        {% else %}
        kwargs = {}
        {% endif %}
        try:
            result = self.call_function_with_timeout(function, args, kwargs, {{ item.time_limit }})
            expected = "{{ test_case.expected }}"
            
            # FAILED: Function output mismatch
            self.assertEqual(
                str(result), str(expected),
                f"FAILED: Test case {{ loop.index }} - Expected: {expected}, Got: {result}"
            )
        except AssertionError:
            raise
        except TimeoutError:
            self.fail(f"TIME LIMIT EXCEEDED: Test case {{ loop.index }} for function '{function_name}' timed out after {{ item.time_limit }} seconds")
        except Exception as e:
            self.fail(f"RUNTIME ERROR: Test case {{ loop.index }} for function '{function_name}' failed with exception: {str(e)}")
        {% endfor %}
        {% endif %}
        
        # PASSED: All function tests successful
        print(f"PASSED: All tests passed for function '{function_name}'") 