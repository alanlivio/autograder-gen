    @weight({{ item.total_mark }})
    @number({{ question_number }}.{{ loop.index }})
    @visibility('{{ item.visibility }}')
    def test_{{ test_name }}(self):
        """{{ question.name }} - Item {{ loop.index }}"""
        # Output comparison test
        target_file = "{{ item.target_file }}"
        expected_input = """{{ item.expected_input }}"""
        expected_output = """{{ item.expected_output }}"""
        file_path = self.source_dir / target_file
        print(f"Starting test for '{target_file}'")
        # FAILED: File not found
        self.assertTrue(file_path.exists(), 
            f"FAILED: File '{target_file}' not found")
        
        try:
{% if config.language == 'python' %}
            result = subprocess.run(
                [sys.executable, target_file],
                input=expected_input,
                capture_output=True,
                text=True,
                timeout={{ item.time_limit }},
                cwd=self.source_dir
            )
{% endif %}
            # FAILED: Program exited with error
            if result.returncode != 0:
                self.fail(f"FAILED: Program '{target_file}' exited with error: {result.stderr}")
            
            actual_output = result.stdout
            
            # FAILED: Output mismatch
            self.assertEqual(
                actual_output, expected_output,
                f"FAILED: Output mismatch\nExpected:\n{expected_output}\nActual:\n{actual_output}"
            )
        except AssertionError:
            raise
        except subprocess.TimeoutExpired:
            self.fail(f"TIME LIMITED EXCEEDED: Program '{target_file}' timed out after {{ item.time_limit }} seconds")
        except Exception as e:
            self.fail(f"RUNTIME ERROR: Error running program '{target_file}': {str(e)}")
        
        # PASSED: Output matches expected
        print(f"PASSED: Output comparison successful for '{target_file}'") 